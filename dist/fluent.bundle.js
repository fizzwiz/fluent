!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.fluent=e():t.fluent=e()}(self,()=>(()=>{"use strict";var t={d:(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{AsyncEach:()=>o,AsyncWhat:()=>s,Each:()=>c,Errors:()=>i,Path:()=>n,Scope:()=>r,What:()=>a});class r{constructor(t=void 0,e=void 0,r={}){this._parent=t,this._name=e,this._children=r}get parent(){return this._parent}set parent(t){this._parent=t}get name(){return this._name}let(t,e){return this[t]=e,this}letChild(t,e){return this._children[t]=e,e.parent=this,e._name=t,this}get(...t){return this.ancestors().which(e=>t.every(t=>void 0!==e[t])).then(e=>e[t[0]]).what()}getChild(...t){let e=this;for(const r of t)if(e=e?._children?.[r],!e)break;return e}resolve(t){return"string"==typeof t?this.get(t):t}forget(t){return delete this[t],this}isLeaf(){return void 0===this.children().what()}isRoot(){return void 0===this.parent}children(){return c.as(Object.values(this._children))}root(){return this.parent?this.parent.root():this}ancestors(){return c.along(this,t=>t.parent)}}class n extends r{constructor(t=void 0,e=void 0){super(t,void 0),this._last=e,this._length=t?t._length+1:void 0!==e?1:0}static of(...t){return(new n).along(t)}get prev(){return this._parent}get last(){return this._last}get length(){return this._length}let(t,e){throw new Error("A Path is immutable!")}letChild(t,e){throw new Error("A Path is immutable!")}forget(t){throw new Error("A Path is immutable!")}isEmpty(){return 0==this._length}add(t){return new n(0<this.length?this:void 0,t)}along(t){let e=this;for(let r of t)e=e.add(r);return e}across(t){const e=this,r=new c;return r[Symbol.iterator]=function*(){for(let r of t)yield e.add(r)},r}toArray(t=this.length,e=t=>t){const r=new Array(t);let n=this;for(;0<t;)r[t-1]=e(n.last),n=n.prev,t--;return r}}class o{[Symbol.asyncIterator](){throw"abstract method!"}static of(...t){const e=new o;return e[Symbol.asyncIterator]=async function*(){for(const e of t)yield await e},e}static as(t){if(t instanceof o)return t;if(null!=t&&"function"==typeof t[Symbol.asyncIterator]){const e=new o;return e[Symbol.asyncIterator]=async function*(){for await(const e of t)yield e},e}if(null!=t&&"function"==typeof t[Symbol.iterator]){const e=new o;return e[Symbol.asyncIterator]=async function*(){for(const e of t)yield e},e}return o.of(t)}async toArray(){const t=[];for await(const e of this)t.push(e);return t}async equals(t){return o.equal(this,t)}static along(t,e){const r=new o;return r[Symbol.asyncIterator]=async function*(){let r=t;for(;null!=r;)yield r,r=await e(r)},r}static async equal(t,e){if("string"==typeof t||!c.isIterable(t)&&!o.isAsyncIterable(t)||"string"==typeof e||!c.isIterable(e)&&!o.isAsyncIterable(e))return t===e;{const r=o.as(t)[Symbol.asyncIterator](),n=o.as(e)[Symbol.asyncIterator]();for(;;){const t=await r.next(),e=await n.next();if(t.done||e.done)return t.done===e.done;if(!await o.equal(t.value,e.value))return!1}}}static isAsyncIterable(t){return null!=t&&"function"==typeof t[Symbol.asyncIterator]}if(t=t=>void 0!==t){const e=this,r=new o;return r[Symbol.asyncIterator]=async function*(){let r=0;for await(const n of e)await t(n,r++)&&(yield n)},r}sthen(t){const e=this,r=new o;return r[Symbol.asyncIterator]=async function*(){let r=0;for await(const n of e)yield await t(n,r++)},r}else(t=void 0){return void 0===t?o.else(this):o.else([this,o.as(t)])}static else(t){const e=new o;return e[Symbol.asyncIterator]=async function*(){for await(const e of o.as(t)){const t=o.as(e);for await(const e of t)yield e}},e}which(t){return this.if(t)}when(t,e=!0,r=e){return o.when(this,t,e,r)}static when(t,e,r=!0,n=r){if(void 0===e){const e={};return e[Symbol.asyncIterator]=async function*(){for await(const e of t)yield e},o.as(e)}if("number"==typeof e){const t=e;e=(e,r)=>r===t}const s=new o;return s[Symbol.asyncIterator]=r?async function*(){let r=0,o=!1;for await(const s of t)o?yield s:await e(s,r)&&(o=!0,n&&(yield s)),r++}:async function*(){let r=0,o=!1;for await(const s of t){if(o)break;await e(s,r)?(o=!0,n&&(yield s)):yield s,r++}},s}match(t=void 0){return void 0===t?o.match(this):o.match(this,o.as(t))}static match(...t){const e=new o,r=t.map(t=>o.as(t));return e[Symbol.asyncIterator]=async function*(){const t=r.map(t=>t[Symbol.asyncIterator]());for(;;){const e=await Promise.all(t.map(t=>t.next()));if(e.some(t=>t.done))break;yield e.map(t=>t.value)}},e}each(t=void 0){if(void 0===t)return o.each(...this);const e=this,r=new o;return r[Symbol.asyncIterator]=async function*(){for await(const r of e)for await(const e of o.as(t))yield[r,e]},r}static each(...t){const e=t.map(t=>o.as(t));return a.as(t=>{if(t.length>=e.length)return o.of();const r=e[t.length],n=new o;return n[Symbol.asyncIterator]=async function*(){for await(const e of r)yield t.add(e)},n})}self(){return o.self(this)}static self(t){const e=o.as(t),r=new o;return r[Symbol.asyncIterator]=async function*(){for(;;)yield e},r}async what(t,e){return o.what(this,t,e)}static async what(t,e,r){const n=o.as(t);if(e){let t=void 0!==r;for await(const o of n)t?r=await e(r,o):(r=o,t=!0);return r}for await(const t of n)return t}}class s{async what(...t){throw new Error("Abstract method what() must be implemented in subclasses!")}async let(t,e){throw new Error("Abstract method let() must be implemented!")}static of(t,e){return Array.isArray(t)||(t=[t]),s.as(async(...r)=>await o.equal(t,r)?e:void 0)}static as(t){if(t instanceof s)return t;if("function"!=typeof t){const e=t;t=async()=>e}const e=async(...e)=>await t(...e);return Object.setPrototypeOf(e,s.prototype),e.what=t,e}static retype(t,e){return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),t}if(t=async t=>void 0!==t){return s.retype(s.if(t,this),this)}static if(t,e){return s.as(async(...r)=>await t(...r)?await e(...r):void 0)}sthen(...t){return s.retype(s.sthen(this,...t),this)}static sthen(...t){return s.as(async e=>{let r=e;for(let e of t){if(void 0===r)break;r=await e(r)}return r})}else(t,e=void 0){const r="string"==typeof e?e:void 0,n=e instanceof RegExp?e:void 0;return s.retype(async(...e)=>{let o;try{o=await this(...e)}catch(o){const s=o.message??JSON.stringify(o);if(r&&r===s||n&&n.test(s))return await t(...e,o);throw o}return void 0===o?await t(...e):o},this)}static else(...t){return s.as(async e=>{let r;for(let n of t){try{r=await n(e)}catch{r=void 0}if(void 0!==r)break}return r})}which(t=async t=>void 0!==t){return s.retype(s.which(this,t),this)}static which(t,e=async t=>void 0!==t){return s.as(async(...r)=>{const n=await t(...r);return await e(n,...r)?n:void 0})}when(t){return s.retype(s.when(t,this),this)}static when(t,e){return s.if(t,e)}match(...t){return s.retype(s.match(this,...t),this)}static match(...t){const e=t.length<2?async e=>[e,await t[0](e)]:async e=>{const r=[];for(let n of t)r.push(await n(e));return r};return s.as(e)}each(t){return s.retype(async(...e)=>await o.as(await this(...e)).which().sthen(t).which().else().toArray(),this)}static each(...t){return s.as(async e=>{const r=e instanceof n?e:n.of(e);return r.length>t.length?c.of():r.across(await o.as(await s.as(t[r.length-1])(r.last)).which().toArray()).which()})}self(t=void 0,e=void 0){return s.retype(s.self(this,t,e),this)}static self(t,e=void 0,r=void 0){let n;return n=void 0===e?void 0===r?async e=>e.across(await o.as(await t(e.last)).which().toArray()):async(...e)=>{const n=await t(...e);if(void 0===n)return;const o={};return o[r]=n,o}:"number"==typeof e?async(...n)=>await t(...n.slice(0,e),r,...n.slice(e)):async n=>{let s=[];for await(let t of o.as("string"==typeof e?[e]:e).sthen(t=>"string"==typeof t?n[t]:t))s.push(t);const i=await("string"==typeof t?n[t]:t)(...s);if(void 0!==i)return void 0!==r?(n[r]=i,n):i},s.as(n)}}class i{static matches(t,e){if(null==t)return!1;switch(typeof e){case"number":return t.statusCode===e;case"string":return t.constructor?.name===e;case"function":return e(t);case"object":return e instanceof RegExp&&e.test(t.message);default:return!1}}}class a{what(...t){throw new Error("Abstract method what() must be implemented in subclasses!")}let(t,e){throw new Error("Abstract method let() must be implemented!")}static of(t,e){return Array.isArray(t)||(t=[t]),a.as((...r)=>c.equal(t,r)?e:void 0)}static as(t){if(t instanceof a)return t;if("function"!=typeof t){const e=t;t=()=>e}const e=(...e)=>t(...e);return Object.setPrototypeOf(e,a.prototype),e.what=t,e}static retype(t,e){return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),t}if(t=t=>void 0!==t){return a.retype(a.if(t,this),this)}static if(t,e){return a.as((...r)=>t(...r)?e(...r):void 0)}sthen(t){return a.retype(a.sthen(this,t),this)}static sthen(...t){return a.as(e=>{let r=e;for(let e of t){if(void 0===r)break;r=e(r)}return r})}else(t,e){return a.retype((...r)=>{let n;try{n=this(...r)}catch(n){if(!e||i.matches(n,e))return t(...r,n);throw n}return void 0===n?t(...r):n},this)}static else(...t){return a.as(e=>{let r;for(let n of t){try{r=n(e)}catch{r=void 0}if(void 0!==r)break}return r})}which(t=t=>void 0!==t){return a.retype(a.which(this,t),this)}static which(t,e=t=>void 0!==t){return a.as((...r)=>{const n=t(...r);return e(n,...r)?n:void 0})}when(t){return a.when(t,this)}static when(t,e){return s.as(async(...r)=>await t(...r)?await e(...r):void 0)}match(...t){return a.retype(a.match(this,...t),this)}static match(...t){const e=t.length<2?e=>[e,t[0](e)]:e=>t.map(t=>t(e));return a.as(e)}each(t){return a.retype((...e)=>c.as(this(...e)).which().sthen(t).which().else(),this)}static each(...t){return a.as(e=>{const r=e instanceof n?e:n.of(e);return r.length>t.length?c.of():r.across(c.as(a.as(t[r.length-1])(r.last)).which()).which()})}self(t=void 0,e=void 0){return a.retype(a.self(this,t,e),this)}static self(t,e=void 0,r=void 0){let n;return n=void 0===e?void 0===r?e=>e.across(c.as(t(e.last)).which()):(...e)=>{const n=t(...e);if(void 0===n)return;const o={};return o[r]=n,o}:"number"==typeof e?(...n)=>t(...n.slice(0,e),r,...n.slice(e)):n=>{const o=c.as("string"==typeof e?[e]:e).sthen(t=>"string"==typeof t?n[t]:t),s=("string"==typeof t?n[t]:t)(...o);if(void 0!==s)return void 0!==r?(n[r]=s,n):s},a.as(n)}}class c{[Symbol.iterator](){throw"abstract method!"}static as(t){if(void 0===t)return c.of();if(t instanceof c)return t;if(t[Symbol.iterator]){const e=new c;return e[Symbol.iterator]=t[Symbol.iterator].bind(t),e}{const e=new c;return e[Symbol.iterator]=function*(){yield t},e}}static of(...t){const e=new c;return e[Symbol.iterator]=function*(){for(const e of t)yield e},e}static along(t,e){const r=new c;return r[Symbol.iterator]=function*(){let r=t;for(;r;)yield r,r=e(r)},r}toArray(){return Array.from(this)}equals(t){return c.equal(this,t)}static equal(t,e){if("string"==typeof t||!c.isIterable(t)||"string"==typeof e||!c.isIterable(e))return t===e;{const r=t[Symbol.iterator](),n=e[Symbol.iterator]();for(;;){const t=r.next(),e=n.next();if(t.done||e.done)return t.done===e.done;if(!c.equal(t.value,e.value))return!1}}}static isIterable(t){return null!=t&&"function"==typeof t[Symbol.iterator]}if(t=t=>void 0!==t){return c.if(this,t)}static if(t,e=t=>void 0!==t){return c.which(t,e)}sthen(t){return c.sthen(this,t)}static sthen(t,e){const r=new c;return r[Symbol.iterator]=function*(){let r=0;for(let n of t)yield e(n,r++)},r}else(t=void 0){return void 0===t?c.else(this):c.else(c.of(this,c.as(t)))}static else(t){const e=new c;return e[Symbol.iterator]=function*(){for(let e of t)if(e[Symbol.iterator])for(let t of e)yield t;else yield e},e}which(t=t=>void 0!==t){return c.which(this,t)}static which(t,e=t=>void 0!==t){const r=new c;return r[Symbol.iterator]=function*(){let r=0;for(let n of t)e(n,r++)&&(yield n)},r}when(t,e=!0,r=e){return c.when(this,t,e,r)}static when(t,e,r=!0,n=r){if(void 0===e){const e={};return e[Symbol.asyncIterator]=async function*(){for(const e of t)yield await e},o.as(e)}if("number"==typeof e){const t=e;e=(e,r)=>r===t}const s=new c;return s[Symbol.iterator]=r?function*(){let r=0,o=!1;for(let s of t)o?yield s:e(s,r)&&(o=!0,n&&(yield s)),r++}:function*(){let r=0,o=!1;for(let s of t){if(o)break;e(s,r)?(o=!0,n&&(yield s)):yield s,r++}},s}match(t=void 0){return void 0===t?c.match(...this):c.match(this,c.as(t))}static match(...t){const e=new c;return e[Symbol.iterator]=function*(){const e=t.map(t=>t[Symbol.iterator]());for(;;){const t=e.map(t=>t.next());if(t.some(t=>t.done))break;yield t.map(t=>t.value)}},e}each(t=void 0){if(void 0===t)return c.each(...this);const e=this,r=new c;return r[Symbol.iterator]=function*(){for(let r of e)for(let e of c.as(t))yield[r,e]},r}static each(...t){return t=t.map(t=>t[Symbol.iterator]?t:[t]),a.as(e=>e.length<t.length?e.across(t[e.length]):c.of())}self(){return c.self(this)}static self(t){const e=new c;return e[Symbol.iterator]=function*(){for(;;)yield t},e}what(t=void 0,e=void 0){return c.what(this,t,e)}static what(t,e,r){if(e){void 0===r&&(r=c.what(t),t=c.when(t,1));for(let n of t)r=e(r,n);return r}for(let e of t)return e}}return c.NATURAL=new c,c.NATURAL[Symbol.iterator]=function*(){let t=0;for(;;)yield t++},e})());
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.fluent=e():t.fluent=e()}(self,()=>(()=>{"use strict";var t={d:(e,r)=>{for(var o in r)t.o(r,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{Each:()=>s,Path:()=>o,Scope:()=>r,What:()=>n});class r{constructor(t=void 0,e=void 0,r={}){this._parent=t,this._name=e,this._children=r}get parent(){return this._parent}set parent(t){this._parent=t}get name(){return this._name}let(t,e){return this[t]=e,this}letChild(t,e){return this._children[t]=e,e.parent=this,e._name=t,this}get(...t){return this.ancestors().which(e=>t.every(t=>void 0!==e[t])).then(e=>e[t[0]]).what()}getChild(...t){let e=this;for(const r of t)if(e=e?._children?.[r],!e)break;return e}resolve(t){return"string"==typeof t?this.get(t):t}forget(t){return delete this[t],this}isLeaf(){return void 0===this.children().what()}isRoot(){return void 0===this.parent}children(){return s.as(Object.values(this._children))}root(){return this.parent?this.parent.root():this}ancestors(){return s.along(this,t=>t.parent)}}class o extends r{constructor(t=void 0,e=void 0){super(t,void 0),this._last=e,this._length=t?t._length+1:void 0!==e?1:0}static of(...t){return(new o).along(t)}static ofProperties(t,e,r=void 0){let i=new o,s=t;for(let t of e){if(void 0===s[t]&&r&&(s[t]=n.what(r,s,t)),void 0===s[t])break;i=i.add(s[t]),s=s[t]}return i}get prev(){return this._parent}get last(){return this._last}get length(){return this._length}let(t,e){throw new Error("A Path is immutable!")}letChild(t,e){throw new Error("A Path is immutable!")}forget(t){throw new Error("A Path is immutable!")}isEmpty(){return 0==this._length}add(t){return new o(0<this.length?this:void 0,t)}along(t){let e=this;for(let r of t)e=e.add(r);return e}across(t){const e=this,r=new s;return r[Symbol.iterator]=function*(){for(let r of t)yield e.add(r)},r}toArray(t=this.length,e=t=>t){const r=new Array(t);let o=this;for(;0<t;)r[t-1]=e(o.last),o=o.prev,t--;return r}}class n{what(...t){throw new Error("Abstract method what() must be implemented in subclasses!")}let(t,e){throw"abstract method!"}static as(t){if(t instanceof n)return t;if("function"==typeof t){const e=new n;return e.what=t,e}return n.as(e=>e===t)}toFunc(){return(...t)=>this.what(...t)}static of(t,e){Array.isArray(t)||(t=[t]);const r=new n;return r.what=(...r)=>s.equal(r,t)?e:void 0,r}if(t=t=>void 0!==t){return n.if(this,t)}which(t=t=>void 0!==t){return n.which(this,t)}when(t,e=!0,r=e){return n.when(this,t,e,r)}then(t){return n.then(this,t)}else(t){return n.else(this,t)}match(...t){return n.match(this,...t)}each(t){const e=new n;return e.what=(...e)=>{const r=new s,o=s.as(this.what(...e)).which().toArray();return r[Symbol.iterator]=function*(){for(let e of o)for(let r of s.as(n.what(t,e)).which())yield r},r},e}self(t=void 0,e=void 0){return n.self(this,t,e)}static if(t,e=t=>void 0!==t){return n.as(r=>n.what(e,r)?n.what(t,r):void 0)}static which(t,e=t=>void 0!==t){return n.as(r=>s.as(n.what(t,r)).which((t,o)=>e(t,o,r)))}static when(t,e,r=!0,o=r){const i="number"==typeof e;return n.as((...a)=>{const h=i?e:(t,r)=>n.what(e,t,r,...a);return s.as(n.what(t,...a)).when(h,r,o)})}static then(...t){return n.as(e=>{let r=e;for(let e of t){if(void 0===r)break;r=r instanceof Promise?r.then(e):n.what(e,r)}return r})}static else(...t){return n.as(e=>{let r;for(let o of t){try{r=n.what(o,e)}catch(t){r=void 0}if(void 0!==r)break}return r})}static what(t,...e){return t instanceof n?t.what(...e):"function"==typeof t?t(...e):t}static match(...t){const e=t.length<2?e=>{const r=n.what(t[0],e);return r[Symbol.iterator]?s.as(r).then(t=>[e,t]):[e,r]}:e=>t.map(t=>n.what(t,e));return n.as(e)}static each(...t){return n.as(e=>{const r=e instanceof o?e:o.of(e);return r.length>t.length?s.of():r.across(s.as(n.what(t[r.length-1],r.last)).which()).which()})}static self(t,e=void 0,r=void 0){let o;return o=void 0===e?void 0===r?e=>e.across(s.as(n.what(t,e.last)).which()):(...e)=>{const o=n.what(t,...e);if(void 0===o)return;const i={};return i[r]=o,i}:"number"==typeof e?(...e)=>{const o=e.splice(i,0,r);return n.what(t,...o)}:o=>{const i=s.as("string"==typeof e?[e]:e).then(t=>"string"==typeof t?o[t]:t),a=n.what("string"==typeof t?o[t]:t,...i);return void 0===a?void 0:void 0!==r?(o[r]=a,o):a},n.as(o)}}class s{[Symbol.iterator](){throw"abstract method!"}toArray(){return Array.from(this)}equals(t){return s.equal(this,t)}if(t=t=>void 0!==t){return s.if(this,t)}which(t=t=>void 0!==t){return s.which(this,t)}then(t){return s.then(this,t)}else(t=void 0){return void 0===t?s.else(this):s.else(s.of(this,s.as(t)))}match(t=void 0){return void 0===t?s.match(...this):s.match(this,s.as(t))}each(t=void 0){if(void 0===t)return s.each(...this);const e=this,r=new s;return r[Symbol.iterator]=function*(){for(let r of e)for(let e of s.as(t))yield[r,e]},r}when(t,e=!0,r=e){return s.when(this,t,e,r)}self(){return s.self(this)}what(t=void 0,e=void 0){return s.what(this,t,e)}static as(t){if(void 0===t)return s.of();if(t instanceof s)return t;if(t[Symbol.iterator]){const e=new s;return e[Symbol.iterator]=t[Symbol.iterator].bind(t),e}return s.of(t)}static of(...t){return s.as(t)}static along(t,e){const r=new s;return r[Symbol.iterator]=function*(){let r=t;for(;r;)yield r,r=n.what(e,r)},r}static equal(t,e){if("string"==typeof t||!s.isIterable(t)||"string"==typeof e||!s.isIterable(e))return t===e;{const r=t[Symbol.iterator](),o=e[Symbol.iterator]();for(;;){const t=r.next(),e=o.next();if(t.done||e.done)return t.done===e.done;if(!s.equal(t.value,e.value))return!1}}}static isIterable(t){return null!=t&&"function"==typeof t[Symbol.iterator]}static if(t,e=t=>void 0!==t){return s.which(t,e)}static which(t,e=t=>void 0!==t){const r=new s;return r[Symbol.iterator]=function*(){let r=0;for(let o of t)n.what(e,o,r++)&&(yield o)},r}static self(t){const e=new s;return e[Symbol.iterator]=function*(){for(;;)yield t},e}static then(t,e){const r=new s;return r[Symbol.iterator]=function*(){let r=0;for(let o of t)yield n.what(e,o,r++)},r}static else(t){const e=new s;return e[Symbol.iterator]=function*(){for(let e of t)if(e[Symbol.iterator])for(let t of e)yield t;else yield e},e}static match(...t){const e=new s;return e[Symbol.iterator]=function*(){const e=t.map(t=>t[Symbol.iterator]());for(;;){const t=e.map(t=>t.next());if(t.some(t=>t.done))break;yield t.map(t=>t.value)}},e}static each(...t){return t=t.map(t=>t[Symbol.iterator]?t:[t]),n.as(e=>e.length<t.length?e.across(t[e.length]):s.of())}static when(t,e,r=!0,o=r){if("number"==typeof e){const t=e;e=(e,r)=>r===t}const i=new s;return i[Symbol.iterator]=r?function*(){let r=0,i=!1;for(let s of t)i?yield s:n.what(e,s,r)&&(i=!0,o&&(yield s)),r++}:function*(){let r=0,i=!1;for(let s of t){if(i)break;n.what(e,s,r)?(i=!0,o&&(yield s)):yield s,r++}},i}static what(t,e,r){if(e){void 0===r&&(r=s.what(t),t=s.when(t,1));for(let o of t)r=n.what(e,r,o);return r}for(let e of t)return e}}return s.NATURAL=new s,s.NATURAL[Symbol.iterator]=function*(){let t=0;for(;;)yield t++},e})());